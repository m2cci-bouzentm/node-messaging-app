// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  username         String         @unique
  email            String         @unique
  password         String
  avatarUrl        String?
  sentMessages     Message[]      @relation("sentMessages")
  receivedMessages Message[]      @relation("receivedMessages")
  conversations    Conversation[] //many to many relationship with Conversation
  Message          Message?       @relation(fields: [messageId], references: [id])
  messageId        String?
}

model Message {
  id      String   @id @default(uuid())
  content String
  sentOn  DateTime @default(now())

  sender     User   @relation("sentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User?   @relation("receivedMessages", fields: [receiverId], references: [id])
  receiverId String?

  receivers User[]

  // isRead  Boolean @default(false)

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}

model Conversation {
  id        String    @id @default(uuid())
  createdOn DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String?
  messages  Message[]
  users     User[]
}

// onDelete: Cascade

// model UsersOnConversation {
//   user       User     @relation(fields: [userId], references: [id])
//   userId     String // relation scalar field (used in the `@relation` attribute above)
//   covnersation   Conversation @relation(fields: [conversationId], references: [id])
//   conversationId String // relation scalar field (used in the `@relation` attribute above)
//   createdAt DateTime @default(now())

//   @@id([userId, conversationId])
// }
